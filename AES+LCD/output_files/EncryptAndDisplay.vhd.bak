library IEEE;
library WORK;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.all;
use IEEE.NUMERIC_STD.all;
use WORK.AES_TYPES.all;

entity tb_EncryptAndDisplay is
end entity;

architecture testbench of tb_EncryptAndDisplay is
	signal clk : std_logic := '0';
	
	component EncryptAndDisplay is 
	   PORT( 
      reset              : IN     std_logic;  -- Map this Port to a Switch within your [Port Declarations / Pin Planer]  
      clock_50           : IN     std_logic;  -- Using the DE2 50Mhz Clk, in order to Genreate the 400Hz signal... clk_count_400hz reset count value must be set to:  <= x"0F424"
      
      lcd_rs             : OUT    std_logic;
      lcd_e              : OUT    std_logic;
      lcd_rw             : OUT    std_logic;
      lcd_on             : OUT    std_logic;
      lcd_blon           : OUT    std_logic;
      
      data_bus_0         : INOUT  STD_LOGIC;
      data_bus_1         : INOUT  STD_LOGIC;
      data_bus_2         : INOUT  STD_LOGIC;
      data_bus_3         : INOUT  STD_LOGIC;
      data_bus_4         : INOUT  STD_LOGIC;
      data_bus_5         : INOUT  STD_LOGIC;
      data_bus_6         : INOUT  STD_LOGIC;
      data_bus_7         : INOUT  STD_LOGIC;
      
      LCD_CHAR_ARRAY_0    : IN    STD_LOGIC;
      LCD_CHAR_ARRAY_1    : IN    STD_LOGIC);
	end component;
	begin
	
	LCDDISP : EncryptAndDisplay port map (reset => open, clock_50 => clk, lcd_rs => open, lcd_e => open, lcd_rw => open, lcd_on => open, lcd_blon => open, data_bus_0 =>open,
					data_bus_1 => open, data_bus_2=> open,data_bus_3=> open,data_bus_4,data_bus_5=> open,data_bus_6=> open,data_bus_7=> open,lcd_CHAR_ARRAY_0 => '0', LCD_CHAR_ARRAY_1='1');
					
					
	clocking : process 
	begin
		clk <= '1';
		wait for 5 ns;
		clk <= '0';
		wait for 5 ns;





architecture structural of EncryptAndDisplay is
